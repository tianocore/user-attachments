From 3002744efaabac51890991b133daff0cdb84357e Mon Sep 17 00:00:00 2001
From: Gerd Hoffmann <kraxel@redhat.com>
Date: Wed, 4 Jan 2023 17:31:22 +0100
Subject: [PATCH 1/1] OvmfPkg: check 64bit mmio window for overlaps with
 reservations

Add new operation mode to PlatformScanOrAdd64BitE820Ram() which checks
whenever any reservations from the qemu e820 table overlap with the mmio
window.  Should that be the case move it to avoid the conflict.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 OvmfPkg/Library/PlatformInitLib/MemDetect.c | 26 ++++++++++++++++++---
 1 file changed, 23 insertions(+), 3 deletions(-)

diff --git a/OvmfPkg/Library/PlatformInitLib/MemDetect.c b/OvmfPkg/Library/PlatformInitLib/MemDetect.c
index 0c4956852689..9935fc3a72e4 100644
--- a/OvmfPkg/Library/PlatformInitLib/MemDetect.c
+++ b/OvmfPkg/Library/PlatformInitLib/MemDetect.c
@@ -144,6 +144,7 @@ STATIC
 EFI_STATUS
 PlatformScanOrAdd64BitE820Ram (
   IN BOOLEAN  AddHighHob,
+  IN OUT EFI_HOB_PLATFORM_INFO *PlatformInfoHob OPTIONAL,
   OUT UINT64  *LowMemory OPTIONAL,
   OUT UINT64  *MaxAddress OPTIONAL
   )
@@ -245,6 +246,24 @@ PlatformScanOrAdd64BitE820Ram (
           E820Entry.Length
           );
       }
+      if (PlatformInfoHob) {
+        UINT64 IntersectionBase;
+        UINT64 IntersectionEnd;
+
+        IntersectionBase = MAX (E820Entry.BaseAddr,
+                                PlatformInfoHob->PcdPciMmio64Base);
+        IntersectionEnd = MIN (E820Entry.BaseAddr + E820Entry.Length,
+                               PlatformInfoHob->PcdPciMmio64Base +
+                               PlatformInfoHob->PcdPciMmio64Size);
+        if (IntersectionBase < IntersectionEnd) {
+          // have overlap, so move mmio window down from end of address space
+          DEBUG ((DEBUG_INFO, "%a: move mmio: 0x%Lx => %Lx\n",
+                  __FUNCTION__,
+                  PlatformInfoHob->PcdPciMmio64Base,
+                  E820Entry.BaseAddr - PlatformInfoHob->PcdPciMmio64Size));
+          PlatformInfoHob->PcdPciMmio64Base = E820Entry.BaseAddr - PlatformInfoHob->PcdPciMmio64Size;
+        }
+      }
     }
   }
 
@@ -336,7 +355,7 @@ PlatformGetSystemMemorySizeBelow4gb (
     return (UINT32)GetHighestSystemMemoryAddressFromPvhMemmap (TRUE);
   }
 
-  Status = PlatformScanOrAdd64BitE820Ram (FALSE, &LowerMemorySize, NULL);
+  Status = PlatformScanOrAdd64BitE820Ram (FALSE, NULL, &LowerMemorySize, NULL);
   if ((Status == EFI_SUCCESS) && (LowerMemorySize > 0)) {
     return (UINT32)LowerMemorySize;
   }
@@ -408,7 +427,7 @@ PlatformGetFirstNonAddress (
   // Otherwise, get the flat size of the memory above 4GB from the CMOS (which
   // can only express a size smaller than 1TB), and add it to 4GB.
   //
-  Status = PlatformScanOrAdd64BitE820Ram (FALSE, NULL, &FirstNonAddress);
+  Status = PlatformScanOrAdd64BitE820Ram (FALSE, NULL, NULL, &FirstNonAddress);
   if (EFI_ERROR (Status)) {
     FirstNonAddress = BASE_4GB + PlatformGetSystemMemorySizeAbove4gb ();
   }
@@ -644,6 +663,7 @@ PlatformDynamicMmioWindow (
     DEBUG ((DEBUG_INFO, "%a:   MMIO Space 0x%Lx (%Ld GB)\n", __func__, MmioSpace, RShiftU64 (MmioSpace, 30)));
     PlatformInfoHob->PcdPciMmio64Size = MmioSpace;
     PlatformInfoHob->PcdPciMmio64Base = AddrSpace - MmioSpace;
+    PlatformScanOrAdd64BitE820Ram (FALSE, PlatformInfoHob, NULL, NULL);
   } else {
     DEBUG ((DEBUG_INFO, "%a: using classic mmio window\n", __func__));
   }
@@ -956,7 +976,7 @@ PlatformQemuInitializeRam (
     // entries. Otherwise, create a single memory HOB with the flat >=4GB
     // memory size read from the CMOS.
     //
-    Status = PlatformScanOrAdd64BitE820Ram (TRUE, NULL, NULL);
+    Status = PlatformScanOrAdd64BitE820Ram (TRUE, NULL, NULL, NULL);
     if (EFI_ERROR (Status)) {
       UpperMemorySize = PlatformGetSystemMemorySizeAbove4gb ();
       if (UpperMemorySize != 0) {
-- 
2.39.0

