From afd9ff4467125bb9a66b7eaae8a0da20d6502e69 Mon Sep 17 00:00:00 2001
From: Star Zeng <star.zeng@intel.com>
Date: Fri, 5 Jan 2018 13:05:29 +0800
Subject: [PATCH 1/3] MdeModulePkg PeiCore: Ensure FfsFileHeader 8 bytes
 aligned

To follow PI spec, ensure FfsFileHeader 8 bytes aligned.

Current code only handles (FwVolHeader->ExtHeaderOffset != 0) path,
update code to also handle (FwVolHeader->ExtHeaderOffset == 0) path.

Cc: Jiewen Yao <jiewen.yao@intel.com>
Cc: Liming Gao <liming.gao@intel.com>
Contributed-under: TianoCore Contribution Agreement 1.1
Signed-off-by: Star Zeng <star.zeng@intel.com>
---
 MdeModulePkg/Core/Pei/FwVol/FwVol.c | 248 ++++++++++++++++++------------------
 1 file changed, 124 insertions(+), 124 deletions(-)

diff --git a/MdeModulePkg/Core/Pei/FwVol/FwVol.c b/MdeModulePkg/Core/Pei/FwVol/FwVol.c
index 5629c9a1ce20..3f51324936b1 100644
--- a/MdeModulePkg/Core/Pei/FwVol/FwVol.c
+++ b/MdeModulePkg/Core/Pei/FwVol/FwVol.c
@@ -316,10 +316,10 @@ FindFileEx (
       //
       FwVolExtHeader = (EFI_FIRMWARE_VOLUME_EXT_HEADER *) ((UINT8 *) FwVolHeader + FwVolHeader->ExtHeaderOffset);
       FfsFileHeader = (EFI_FFS_FILE_HEADER *) ((UINT8 *) FwVolExtHeader + FwVolExtHeader->ExtHeaderSize);
-      FfsFileHeader = (EFI_FFS_FILE_HEADER *) ALIGN_POINTER (FfsFileHeader, 8);
     } else {
       FfsFileHeader = (EFI_FFS_FILE_HEADER *)((UINT8 *) FwVolHeader + FwVolHeader->HeaderLength);
     }
+    FfsFileHeader = (EFI_FFS_FILE_HEADER *) ALIGN_POINTER (FfsFileHeader, 8);
   } else {
     if (IS_FFS_FILE2 (*FileHeader)) {
       if (!IsFfs3Fv) {
@@ -414,7 +414,7 @@ FindFileEx (
           if (FfsFileHeader->Type == EFI_FV_FILETYPE_FREEFORM) {
             if (CompareGuid (&FfsFileHeader->Name, &gPeiAprioriFileNameGuid)) {
               *AprioriFile = FfsFileHeader;
-            }
+        }
           }
         }
       } else if (((SearchType == FfsFileHeader->Type) || (SearchType == EFI_FV_FILETYPE_ALL)) &&
@@ -445,7 +445,7 @@ FindFileEx (
     default:
       *FileHeader = NULL;
       return EFI_NOT_FOUND;
-    }
+  }
   }
 
   *FileHeader = NULL;
@@ -497,10 +497,10 @@ PeiInitializeFv (
   //
   Status = FvPpi->ProcessVolume (
                     FvPpi,
-                    SecCoreData->BootFirmwareVolumeBase,
-                    (UINTN)BfvHeader->FvLength,
-                    &FvHandle
-                    );
+           SecCoreData->BootFirmwareVolumeBase,
+           (UINTN)BfvHeader->FvLength,
+           &FvHandle
+           );
   ASSERT_EFI_ERROR (Status);
 
   //
@@ -1419,18 +1419,18 @@ ProcessFvFile (
   //
   Index = 0;
   do {
-    AuthenticationStatus = 0;
-    if ((ParentFvPpi->Signature == EFI_PEI_FIRMWARE_VOLUME_PPI_SIGNATURE) &&
-        (ParentFvPpi->Revision == EFI_PEI_FIRMWARE_VOLUME_PPI_REVISION)) {
-      Status = ParentFvPpi->FindSectionByType2 (
-                              ParentFvPpi,
-                              EFI_SECTION_FIRMWARE_VOLUME_IMAGE,
+  AuthenticationStatus = 0;
+  if ((ParentFvPpi->Signature == EFI_PEI_FIRMWARE_VOLUME_PPI_SIGNATURE) &&
+      (ParentFvPpi->Revision == EFI_PEI_FIRMWARE_VOLUME_PPI_REVISION)) {
+    Status = ParentFvPpi->FindSectionByType2 (
+                            ParentFvPpi,
+                            EFI_SECTION_FIRMWARE_VOLUME_IMAGE,
                               Index,
-                              ParentFvFileHandle,
-                              (VOID **)&FvHeader,
-                              &AuthenticationStatus
-                              );
-    } else {
+                            ParentFvFileHandle,
+                            (VOID **)&FvHeader,
+                            &AuthenticationStatus
+                            );
+  } else {
       //
       // Old FvPpi has no parameter to input SearchInstance,
       // only one instance is supported.
@@ -1438,129 +1438,129 @@ ProcessFvFile (
       if (Index > 0) {
         break;
       }
-      Status = ParentFvPpi->FindSectionByType (
-                              ParentFvPpi,
-                              EFI_SECTION_FIRMWARE_VOLUME_IMAGE,
-                              ParentFvFileHandle,
-                              (VOID **)&FvHeader
-                              );
-    }
-    if (EFI_ERROR (Status)) {
+    Status = ParentFvPpi->FindSectionByType (
+                            ParentFvPpi,
+                            EFI_SECTION_FIRMWARE_VOLUME_IMAGE,
+                            ParentFvFileHandle,
+                            (VOID **)&FvHeader
+                            );
+  }
+  if (EFI_ERROR (Status)) {
       break;
-    }
+  }
 
-    Status = VerifyPeim (PrivateData, ParentFvHandle, ParentFvFileHandle, AuthenticationStatus);
-    if (Status == EFI_SECURITY_VIOLATION) {
+  Status = VerifyPeim (PrivateData, ParentFvHandle, ParentFvFileHandle, AuthenticationStatus);
+  if (Status == EFI_SECURITY_VIOLATION) {
       break;
-    }
+  }
 
+  //
+  // If EFI_FVB2_WEAK_ALIGNMENT is set in the volume header then the first byte of the volume
+  // can be aligned on any power-of-two boundary. A weakly aligned volume can not be moved from
+  // its initial linked location and maintain its alignment.
+  //
+  if ((ReadUnaligned32 (&FvHeader->Attributes) & EFI_FVB2_WEAK_ALIGNMENT) != EFI_FVB2_WEAK_ALIGNMENT) {
     //
-    // If EFI_FVB2_WEAK_ALIGNMENT is set in the volume header then the first byte of the volume
-    // can be aligned on any power-of-two boundary. A weakly aligned volume can not be moved from
-    // its initial linked location and maintain its alignment.
+    // FvAlignment must be greater than or equal to 8 bytes of the minimum FFS alignment value.
     //
-    if ((ReadUnaligned32 (&FvHeader->Attributes) & EFI_FVB2_WEAK_ALIGNMENT) != EFI_FVB2_WEAK_ALIGNMENT) {
-      //
-      // FvAlignment must be greater than or equal to 8 bytes of the minimum FFS alignment value.
-      //
-      FvAlignment = 1 << ((ReadUnaligned32 (&FvHeader->Attributes) & EFI_FVB2_ALIGNMENT) >> 16);
-      if (FvAlignment < 8) {
-        FvAlignment = 8;
-      }
+    FvAlignment = 1 << ((ReadUnaligned32 (&FvHeader->Attributes) & EFI_FVB2_ALIGNMENT) >> 16);
+    if (FvAlignment < 8) {
+      FvAlignment = 8;
+    }
 
-      DEBUG ((
-        DEBUG_INFO,
-        "%a() FV at 0x%x, FvAlignment required is 0x%x\n",
-        __FUNCTION__,
-        FvHeader,
-        FvAlignment
-        ));
+    DEBUG ((
+      DEBUG_INFO,
+      "%a() FV at 0x%x, FvAlignment required is 0x%x\n",
+      __FUNCTION__,
+      FvHeader,
+      FvAlignment
+      ));
 
-      //
-      // Check FvImage alignment.
-      //
-      if ((UINTN) FvHeader % FvAlignment != 0) {
-        FvLength    = ReadUnaligned64 (&FvHeader->FvLength);
-        NewFvBuffer = AllocateAlignedPages (EFI_SIZE_TO_PAGES ((UINT32) FvLength), FvAlignment);
-        if (NewFvBuffer == NULL) {
+    //
+    // Check FvImage alignment.
+    //
+    if ((UINTN) FvHeader % FvAlignment != 0) {
+      FvLength    = ReadUnaligned64 (&FvHeader->FvLength);
+      NewFvBuffer = AllocateAlignedPages (EFI_SIZE_TO_PAGES ((UINT32) FvLength), FvAlignment);
+      if (NewFvBuffer == NULL) {
           Status = EFI_OUT_OF_RESOURCES;
           break;
-        }
-        if (GetFvUsedSize (FvHeader, &FvUsedSize, &EraseByte)) {
-          //
-          // Copy the used bytes and fill the rest with the erase value.
-          //
-          CopyMem (NewFvBuffer, FvHeader, (UINTN) FvUsedSize);
-          SetMem (
-            (UINT8 *) NewFvBuffer + FvUsedSize,
-            (UINTN) (FvLength - FvUsedSize),
-            EraseByte
-            );
-        } else {
-          CopyMem (NewFvBuffer, FvHeader, (UINTN) FvLength);
-        }
-        FvHeader = (EFI_FIRMWARE_VOLUME_HEADER*) NewFvBuffer;
       }
+      if (GetFvUsedSize (FvHeader, &FvUsedSize, &EraseByte)) {
+        //
+        // Copy the used bytes and fill the rest with the erase value.
+        //
+        CopyMem (NewFvBuffer, FvHeader, (UINTN) FvUsedSize);
+        SetMem (
+          (UINT8 *) NewFvBuffer + FvUsedSize,
+          (UINTN) (FvLength - FvUsedSize),
+          EraseByte
+          );
+      } else {
+        CopyMem (NewFvBuffer, FvHeader, (UINTN) FvLength);
+      }
+      FvHeader = (EFI_FIRMWARE_VOLUME_HEADER*) NewFvBuffer;
     }
+  }
 
-    Status = ParentFvPpi->GetVolumeInfo (ParentFvPpi, ParentFvHandle, &ParentFvImageInfo);
-    ASSERT_EFI_ERROR (Status);
+  Status = ParentFvPpi->GetVolumeInfo (ParentFvPpi, ParentFvHandle, &ParentFvImageInfo);
+  ASSERT_EFI_ERROR (Status);
 
-    Status = ParentFvPpi->GetFileInfo (ParentFvPpi, ParentFvFileHandle, &FileInfo);
-    ASSERT_EFI_ERROR (Status);
+  Status = ParentFvPpi->GetFileInfo (ParentFvPpi, ParentFvFileHandle, &FileInfo);
+  ASSERT_EFI_ERROR (Status);
 
-    //
-    // Install FvInfo(2) Ppi
-    // NOTE: FvInfo2 must be installed before FvInfo so that recursive processing of encapsulated
-    // FVs inherit the proper AuthenticationStatus.
-    //
-    PeiServicesInstallFvInfo2Ppi(
-      &FvHeader->FileSystemGuid,
-      (VOID**)FvHeader,
-      (UINT32)FvHeader->FvLength,
-      &ParentFvImageInfo.FvName,
-      &FileInfo.FileName,
-      AuthenticationStatus
-      );
-
-    PeiServicesInstallFvInfoPpi (
-      &FvHeader->FileSystemGuid,
-      (VOID**) FvHeader,
-      (UINT32) FvHeader->FvLength,
-      &ParentFvImageInfo.FvName,
-      &FileInfo.FileName
-      );
+  //
+  // Install FvInfo(2) Ppi
+  // NOTE: FvInfo2 must be installed before FvInfo so that recursive processing of encapsulated
+  // FVs inherit the proper AuthenticationStatus.
+  //
+  PeiServicesInstallFvInfo2Ppi(
+    &FvHeader->FileSystemGuid,
+    (VOID**)FvHeader,
+    (UINT32)FvHeader->FvLength,
+    &ParentFvImageInfo.FvName,
+    &FileInfo.FileName,
+    AuthenticationStatus
+    );
 
-    //
-    // Inform the extracted FvImage to Fv HOB consumer phase, i.e. DXE phase
-    //
-    BuildFvHob (
-      (EFI_PHYSICAL_ADDRESS) (UINTN) FvHeader,
-      FvHeader->FvLength
-      );
+  PeiServicesInstallFvInfoPpi (
+    &FvHeader->FileSystemGuid,
+    (VOID**) FvHeader,
+    (UINT32) FvHeader->FvLength,
+    &ParentFvImageInfo.FvName,
+    &FileInfo.FileName
+    );
 
-    //
-    // Makes the encapsulated volume show up in DXE phase to skip processing of
-    // encapsulated file again.
-    //
-    BuildFv2Hob (
-      (EFI_PHYSICAL_ADDRESS) (UINTN) FvHeader,
-      FvHeader->FvLength,
-      &ParentFvImageInfo.FvName,
-      &FileInfo.FileName
-      );
+  //
+  // Inform the extracted FvImage to Fv HOB consumer phase, i.e. DXE phase
+  //
+  BuildFvHob (
+    (EFI_PHYSICAL_ADDRESS) (UINTN) FvHeader,
+    FvHeader->FvLength
+    );
 
-    //
-    // Build FV3 HOB with authentication status to be propagated to DXE.
-    //
-    BuildFv3Hob (
-      (EFI_PHYSICAL_ADDRESS) (UINTN) FvHeader,
-      FvHeader->FvLength,
-      AuthenticationStatus,
-      TRUE,
-      &ParentFvImageInfo.FvName,
-      &FileInfo.FileName
-      );
+  //
+  // Makes the encapsulated volume show up in DXE phase to skip processing of
+  // encapsulated file again.
+  //
+  BuildFv2Hob (
+    (EFI_PHYSICAL_ADDRESS) (UINTN) FvHeader,
+    FvHeader->FvLength,
+    &ParentFvImageInfo.FvName,
+    &FileInfo.FileName
+    );
+
+  //
+  // Build FV3 HOB with authentication status to be propagated to DXE.
+  //
+  BuildFv3Hob (
+    (EFI_PHYSICAL_ADDRESS) (UINTN) FvHeader,
+    FvHeader->FvLength,
+    AuthenticationStatus,
+    TRUE,
+    &ParentFvImageInfo.FvName,
+    &FileInfo.FileName
+    );
 
     Index++;
   } while (TRUE);
@@ -1569,7 +1569,7 @@ ProcessFvFile (
     //
     // At least one FvImage has been processed successfully.
     //
-    return EFI_SUCCESS;
+  return EFI_SUCCESS;
   } else {
     return Status;
   }
-- 
2.7.0.windows.1

