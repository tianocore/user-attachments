From 397a934d76f3ced1641e021f608e21a3d01d0a51 Mon Sep 17 00:00:00 2001
From: Yunhua Feng <yunhuax.feng@intel.com>
Date: Tue, 22 Sep 2020 11:23:26 +0800
Subject: [PATCH] BaseTools/Brotli: Fix Brotli uncompress regression issue

REF: https://bugzilla.tianocore.org/show_bug.cgi?id=2946

BrotliCompression should store the source size and scratch buffer size into
the header of the compressed binary data. But now, BrotliCompression doesn't
store them. So, BrotliDecompression can't work

Cc: Liming Gao <gaoliming@byosoft.com.cn>
Cc: Bob Feng<bob.c.feng@intel.com>

Signed-off-by: Yunhua Feng <yunhuax.feng@intel.com>
---
 c/tools/brotli.c | 91 ++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 84 insertions(+), 7 deletions(-)

diff --git a/c/tools/brotli.c b/c/tools/brotli.c
index 04606a8..eca2d42 100644
--- a/c/tools/brotli.c
+++ b/c/tools/brotli.c
@@ -79,13 +79,16 @@ typedef enum {
 } Command;
 
 #define DEFAULT_LGWIN 24
 #define DEFAULT_SUFFIX ".br"
 #define MAX_OPTIONS 20
+#define DECODE_HEADER_SIZE 0x10
+#define GAP_MEM_BLOCK 0x1000
 
 typedef struct {
   /* Parameters */
+  int gmem;
   int quality;
   int lgwin;
   int verbosity;
   BROTLI_BOOL force_overwrite;
   BROTLI_BOOL junk_source;
@@ -176,10 +179,11 @@ static Command ParseParams(Context* params) {
   int i;
   int next_option_index = 0;
   size_t input_count = 0;
   size_t longest_path_len = 1;
   BROTLI_BOOL command_set = BROTLI_FALSE;
+  BROTLI_BOOL gmem_set = BROTLI_FALSE;
   BROTLI_BOOL quality_set = BROTLI_FALSE;
   BROTLI_BOOL output_set = BROTLI_FALSE;
   BROTLI_BOOL keep_set = BROTLI_FALSE;
   BROTLI_BOOL lgwin_set = BROTLI_FALSE;
   BROTLI_BOOL suffix_set = BROTLI_FALSE;
@@ -322,10 +326,16 @@ static Command ParseParams(Context* params) {
           if (output_set) {
             fprintf(stderr, "write to standard output already set (-o)\n");
             return COMMAND_INVALID;
           }
           params->output_path = argv[i];
+        } else if (c == 'g') {
+          gmem_set = ParseInt(argv[i], 1, 0x10, &params->gmem);
+          if (!gmem_set) {
+            fprintf(stderr, "error parsing gmem value [%s]\n", argv[i]);
+            return COMMAND_INVALID;
+          }
         } else if (c == 'q') {
           if (quality_set) {
             fprintf(stderr, "quality already set\n");
             return COMMAND_INVALID;
           }
@@ -479,10 +489,16 @@ static Command ParseParams(Context* params) {
             fprintf(stderr,
                     "write to standard output already set (--output)\n");
             return COMMAND_INVALID;
           }
           params->output_path = value;
+        } else if (strncmp("gap", arg, key_len) == 0) {
+          gmem_set = ParseInt(value, 1, 0x10, &params->gmem);
+          if (!gmem_set) {
+            fprintf(stderr, "error parsing gmem value [%s]\n", value);
+            return COMMAND_INVALID;
+          }
         } else if (strncmp("quality", arg, key_len) == 0) {
           if (quality_set) {
             fprintf(stderr, "quality already set\n");
             return COMMAND_INVALID;
           }
@@ -548,10 +564,12 @@ static void PrintHelp(const char* name, BROTLI_BOOL error) {
 "  -j, --rm                    remove source file(s)\n"
 "  -k, --keep                  keep source file(s) (default)\n"
 "  -n, --no-copy-stat          do not copy source file(s) attributes\n"
 "  -o FILE, --output=FILE      output file (only if 1 input file)\n");
   fprintf(media,
+"  -g NUM, --gap=NUM           scratch memory gap level (1-16)\n");
+  fprintf(media,
 "  -q NUM, --quality=NUM       compression level (%d-%d)\n",
           BROTLI_MIN_QUALITY, BROTLI_MAX_QUALITY);
   fprintf(media,
 "  -t, --test                  test compressed file integrity\n"
 "  -v, --verbose               verbose mode\n");
@@ -669,10 +687,12 @@ static void CopyStat(const char* input_path, const char* output_path) {
     fprintf(stderr, "setting user failed for [%s]: %s\n",
             PrintablePath(output_path), strerror(errno));
   }
 }
 
+int64_t input_file_length = 0;
+
 static BROTLI_BOOL NextFile(Context* context) {
   const char* arg;
   size_t arg_len;
 
   /* Iterator points to last used arg; increment to search for the next one. */
@@ -706,13 +726,18 @@ static BROTLI_BOOL NextFile(Context* context) {
     context->current_input_path = NULL;
     context->current_output_path = context->output_path;
     return BROTLI_TRUE;
   }
 
-  context->current_input_path = arg;
-  context->input_file_length = FileSize(arg);
+  if (context->current_input_path == NULL) {
+    context->current_input_path = arg;
+  }
+  context->input_file_length = FileSize(context->current_input_path);
   context->current_output_path = context->output_path;
+  if (!context->decompress) {
+    input_file_length += context->input_file_length;
+  }
 
   if (context->output_path) return BROTLI_TRUE;
   if (context->write_to_stdout) return BROTLI_TRUE;
 
   strcpy(context->modified_path, arg);
@@ -744,14 +769,26 @@ static BROTLI_BOOL NextFile(Context* context) {
   }
 }
 
 static BROTLI_BOOL OpenFiles(Context* context) {
   BROTLI_BOOL is_ok = OpenInputFile(context->current_input_path, &context->fin);
-  if (!context->test_integrity && is_ok) {
+  if (context->decompress) {
+    //
+    // skip the decoder data header
+    //
+    fseek(context->fin, DECODE_HEADER_SIZE, SEEK_SET);
+  }
+  if (!context->test_integrity && is_ok && context->fout == NULL) {
     is_ok = OpenOutputFile(
         context->current_output_path, &context->fout, context->force_overwrite);
   }
+  if (!context->decompress) {
+    //
+    // append the decoder data header
+    //
+    fseek(context->fout, DECODE_HEADER_SIZE, SEEK_SET);
+  }
   return is_ok;
 }
 
 static BROTLI_BOOL CloseFiles(Context* context, BROTLI_BOOL success) {
   BROTLI_BOOL is_ok = BROTLI_TRUE;
@@ -790,11 +827,11 @@ static BROTLI_BOOL CloseFiles(Context* context, BROTLI_BOOL success) {
   context->fout = NULL;
 
   return is_ok;
 }
 
-static const size_t kFileBufferSize = 1 << 19;
+static const size_t kFileBufferSize = 1 << 16;
 
 static void InitializeBuffers(Context* context) {
   context->available_in = 0;
   context->next_in = NULL;
   context->available_out = kFileBufferSize;
@@ -903,14 +940,27 @@ static BROTLI_BOOL DecompressFile(Context* context, BrotliDecoderState* s) {
     result = BrotliDecoderDecompressStream(s, &context->available_in,
         &context->next_in, &context->available_out, &context->next_out, 0);
   }
 }
 
+/* Default brotli_alloc_func */
+void* BrotliAllocFunc(void* opaque, size_t size) {
+  *(size_t *)opaque = *(size_t *) opaque + size; 
+  return malloc(size);
+}
+
+/* Default brotli_free_func */
+void BrotliFreeFunc(void* opaque, void* address) {
+  free(address);
+}
+
+size_t scratch_buffer_size = 0;
+
 static BROTLI_BOOL DecompressFiles(Context* context) {
   while (NextFile(context)) {
     BROTLI_BOOL is_ok = BROTLI_TRUE;
-    BrotliDecoderState* s = BrotliDecoderCreateInstance(NULL, NULL, NULL);
+    BrotliDecoderState* s = BrotliDecoderCreateInstance(BrotliAllocFunc, BrotliFreeFunc, &scratch_buffer_size);
     if (!s) {
       fprintf(stderr, "out of memory\n");
       return BROTLI_FALSE;
     }
     /* This allows decoding "large-window" streams. Though it creates
@@ -987,13 +1037,14 @@ static BROTLI_BOOL CompressFiles(Context* context) {
     } else {
       /* 0, or not specified by user; could be chosen by compressor. */
       uint32_t lgwin = DEFAULT_LGWIN;
       /* Use file size to limit lgwin. */
       if (context->input_file_length >= 0) {
+        int32_t size = 1 << BROTLI_MIN_WINDOW_BITS;
         lgwin = BROTLI_MIN_WINDOW_BITS;
-        while (BROTLI_MAX_BACKWARD_LIMIT(lgwin) <
-               (uint64_t)context->input_file_length) {
+        while (size < context->input_file_length) {
+          size <<= 1;
           lgwin++;
           if (lgwin == BROTLI_MAX_WINDOW_BITS) break;
         }
       }
       BrotliEncoderSetParameter(s, BROTLI_PARAM_LGWIN, lgwin);
@@ -1018,15 +1069,17 @@ static BROTLI_BOOL CompressFiles(Context* context) {
 }
 
 int main(int argc, char** argv) {
   Command command;
   Context context;
+  Context context_dec;
   BROTLI_BOOL is_ok = BROTLI_TRUE;
   int i;
 
   context.quality = 11;
   context.lgwin = -1;
+  context.gmem = 1;
   context.verbosity = 0;
   context.force_overwrite = BROTLI_FALSE;
   context.junk_source = BROTLI_FALSE;
   context.copy_stat = BROTLI_TRUE;
   context.test_integrity = BROTLI_FALSE;
@@ -1079,11 +1132,35 @@ int main(int argc, char** argv) {
     case COMMAND_VERSION:
       PrintVersion();
       break;
 
     case COMMAND_COMPRESS:
+      memcpy (&context_dec, &context, sizeof (context));
       is_ok = CompressFiles(&context);
+      if (!is_ok) {
+        break;
+      }
+      context_dec.decompress  = BROTLI_TRUE;
+      context_dec.input_count = 1;
+      context_dec.current_input_path = context_dec.output_path;
+      context_dec.fout = tmpfile ();
+      is_ok = DecompressFiles(&context_dec);
+      if (!is_ok) {
+        break;
+      }
+      //
+      // fill decoder header
+      //
+      context_dec.fout = fopen(context_dec.output_path, "rb+");  /* open output_path file and add in head info */
+      fwrite(&input_file_length, 1, sizeof(int64_t), context_dec.fout);
+      scratch_buffer_size += context.gmem * GAP_MEM_BLOCK;  /* there is a memory gap between IA32 and X64 environment*/
+      scratch_buffer_size += kFileBufferSize * 2;
+      fwrite(&scratch_buffer_size, 1, sizeof(int64_t), context_dec.fout);
+      if (fclose(context_dec.fout) != 0) {
+        fprintf(stderr, "failed to update ouptut file: %s\n", context_dec.output_path);
+        is_ok = 0;
+      }
       break;
 
     case COMMAND_DECOMPRESS:
     case COMMAND_TEST_INTEGRITY:
       is_ok = DecompressFiles(&context);
-- 
2.26.2.windows.1

