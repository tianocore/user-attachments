From 3418fe600669c2e614f57874e4d32062d346d222 Mon Sep 17 00:00:00 2001
From: Xiaoqiang Zhang <xiaoqiang.zhang@intel.com>
Date: Fri, 2 Aug 2024 09:49:34 +0800
Subject: [PATCH v1] MdeModulePkg/Core: CoreValidateHandle optimization

REF : https://bugzilla.tianocore.org/show_bug.cgi?id=4817

Before entering BIOS setup, CoreValidateHandle function executed
over 600,000 times during BDS phase on latest 8S server platform.
The optimization is adding one handle array to store the handle
address when insert each EFI handle into the handle database, and
remove the handle from the handle array if the handle is removed
from the handle database. CoreValidateHandle function changed to
go through the handle array. After verification on latest 8S server
platform, BDS boot time can save 20s after this change.

Cc: Ray Ni <ray.ni@intel.com>
Cc: Star Zeng <star.zeng@intel.com>
Cc: Liming Gao <gaoliming@byosoft.com.cn>
Signed-off-by: Xiaoqiang Zhang <xiaoqiang.zhang@intel.com>
---
 MdeModulePkg/Core/Dxe/Hand/Handle.c | 80 ++++++++++++++++++--
 MdeModulePkg/Core/Dxe/DxeMain.inf   |  1 +
 MdeModulePkg/Core/Dxe/Hand/Handle.h |  1 +
 MdeModulePkg/MdeModulePkg.dec       |  3 +
 4 files changed, 79 insertions(+), 6 deletions(-)

diff --git a/MdeModulePkg/Core/Dxe/Hand/Handle.c b/MdeModulePkg/Core/Dxe/Hand/Handle.c
index 24e4fbf5f3..c8ca1a93f8 100644
--- a/MdeModulePkg/Core/Dxe/Hand/Handle.c
+++ b/MdeModulePkg/Core/Dxe/Hand/Handle.c
@@ -19,6 +19,8 @@ LIST_ENTRY  mProtocolDatabase     = INITIALIZE_LIST_HEAD_VARIABLE (mProtocolData
 LIST_ENTRY  gHandleList           = INITIALIZE_LIST_HEAD_VARIABLE (gHandleList);
 EFI_LOCK    gProtocolDatabaseLock = EFI_INITIALIZE_LOCK_VARIABLE (TPL_NOTIFY);
 UINT64      gHandleDatabaseKey    = 0;
+UINT64      gHandleIndex = 0;
+UINT64      gHandleArray[MAX_HANDLE_NUMBER] = {0};
 
 /**
   Acquire lock on gProtocolDatabaseLock.
@@ -59,18 +61,16 @@ CoreValidateHandle (
   IN  EFI_HANDLE  UserHandle
   )
 {
-  IHANDLE     *Handle;
-  LIST_ENTRY  *Link;
+  UINTN   Index;
 
-  if (UserHandle == NULL) {
+  if ((UserHandle == NULL) || (((IHANDLE *)UserHandle)->Signature != EFI_HANDLE_SIGNATURE)) {
     return EFI_INVALID_PARAMETER;
   }
 
   ASSERT_LOCKED (&gProtocolDatabaseLock);
 
-  for (Link = gHandleList.BackLink; Link != &gHandleList; Link = Link->BackLink) {
-    Handle = CR (Link, IHANDLE, AllHandles, EFI_HANDLE_SIGNATURE);
-    if (Handle == (IHANDLE *)UserHandle) {
+  for (Index = 0; Index < gHandleIndex; Index++) {
+    if ((UINT64)(UINTN)UserHandle == gHandleArray[Index]) {
       return EFI_SUCCESS;
     }
   }
@@ -78,6 +78,44 @@ CoreValidateHandle (
   return EFI_INVALID_PARAMETER;
 }
 
+/**
+  Check whether a handle is in gHandleArray
+  The gProtocolDatabaseLock must be owned
+
+  @param  UserHandle             The handle to find
+  @param  Delete                 Whether to delete the handle in gHandleArray
+
+  @retval EFI_INVALID_PARAMETER  The handle is NULL or not a valid EFI_HANDLE.
+  @retval EFI_SUCCESS            The handle is in gHandleArray.
+  @retval EFI_NOT_FOUND          The handle is not in gHandleArray.
+
+**/
+EFI_STATUS
+FindHandle (
+  IN  EFI_HANDLE  UserHandle,
+  IN  BOOLEAN     Delete
+  )
+{
+  UINTN   Index;
+
+  if ((UserHandle == NULL) || (((IHANDLE *)UserHandle)->Signature != EFI_HANDLE_SIGNATURE)) {
+    return EFI_INVALID_PARAMETER;
+  }
+
+  ASSERT_LOCKED (&gProtocolDatabaseLock);
+
+  for (Index = 0; Index < gHandleIndex; Index++) {
+    if ((UINT64)(UINTN)UserHandle == gHandleArray[Index]) {
+      if (Delete) {
+        gHandleArray[Index] = 0;
+      }
+      return EFI_SUCCESS;
+    }
+  }
+
+  return EFI_NOT_FOUND;
+}
+
 /**
   Finds the protocol entry for the requested protocol.
   The gProtocolDatabaseLock must be owned
@@ -469,7 +507,36 @@ CoreInstallProtocolInterfaceNotify (
     // in the system
     //
     InsertTailList (&gHandleList, &Handle->AllHandles);
+
+    Status = FindHandle (Handle, FALSE);
+    if (Status == EFI_NOT_FOUND) {
+      //
+      // Add the handle into gHandleArray
+      //
+      if (gHandleIndex < MAX_HANDLE_NUMBER) {
+        gHandleArray[gHandleIndex] = (UINT64)(UINTN)Handle;
+        gHandleIndex++;
+      } else {
+        ASSERT (FALSE);
+        DEBUG ((DEBUG_ERROR, "Maximum handle number reached!\n"));
+        goto Done;
+      }
+    }
   } else {
+    Status = FindHandle (Handle, FALSE);
+    if (Status == EFI_NOT_FOUND) {
+      //
+      // Add the handle into gHandleArray
+      //
+      if (gHandleIndex < MAX_HANDLE_NUMBER) {
+        gHandleArray[gHandleIndex] = (UINT64)(UINTN)Handle;
+        gHandleIndex++;
+      } else {
+        ASSERT (FALSE);
+        DEBUG ((DEBUG_ERROR, "Maximum handle number reached!\n"));
+        goto Done;
+      }
+    }
     Status = CoreValidateHandle (Handle);
     if (EFI_ERROR (Status)) {
       DEBUG ((DEBUG_ERROR, "InstallProtocolInterface: input handle at 0x%x is invalid\n", Handle));
@@ -824,6 +891,7 @@ CoreUninstallProtocolInterface (
   // If there are no more handlers for the handle, free the handle
   //
   if (IsListEmpty (&Handle->Protocols)) {
+    FindHandle (Handle, TRUE);
     Handle->Signature = 0;
     RemoveEntryList (&Handle->AllHandles);
     CoreFreePool (Handle);
diff --git a/MdeModulePkg/Core/Dxe/DxeMain.inf b/MdeModulePkg/Core/Dxe/DxeMain.inf
index 090970aec6..3e9126f4fe 100644
--- a/MdeModulePkg/Core/Dxe/DxeMain.inf
+++ b/MdeModulePkg/Core/Dxe/DxeMain.inf
@@ -189,6 +189,7 @@
   gEfiMdeModulePkgTokenSpaceGuid.PcdCpuStackGuard                           ## CONSUMES
   gEfiMdeModulePkgTokenSpaceGuid.PcdFwVolDxeMaxEncapsulationDepth           ## CONSUMES
   gEfiMdeModulePkgTokenSpaceGuid.PcdImageLargeAddressLoad                   ## CONSUMES
+  gEfiMdeModulePkgTokenSpaceGuid.PcdMaxHandleNumber                         ## CONSUMES
 
 # [Hob]
 # RESOURCE_DESCRIPTOR   ## CONSUMES
diff --git a/MdeModulePkg/Core/Dxe/Hand/Handle.h b/MdeModulePkg/Core/Dxe/Hand/Handle.h
index 5c66e4da66..cfd1dd5dd4 100644
--- a/MdeModulePkg/Core/Dxe/Hand/Handle.h
+++ b/MdeModulePkg/Core/Dxe/Hand/Handle.h
@@ -10,6 +10,7 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 #define  _HAND_H_
 
 #define EFI_HANDLE_SIGNATURE  SIGNATURE_32('h','n','d','l')
+#define MAX_HANDLE_NUMBER     FixedPcdGet32 (PcdMaxHandleNumber)
 
 ///
 /// IHANDLE - contains a list of protocol handles
diff --git a/MdeModulePkg/MdeModulePkg.dec b/MdeModulePkg/MdeModulePkg.dec
index 693e45911b..7f25adeffa 100644
--- a/MdeModulePkg/MdeModulePkg.dec
+++ b/MdeModulePkg/MdeModulePkg.dec
@@ -2253,6 +2253,9 @@
   # @Prompt The value is use for Usb Network rate limiting supported.
   gEfiMdeModulePkgTokenSpaceGuid.PcdUsbNetworkRateLimitingFactor|100|UINT32|0x10000028
 
+  ## The maximum handle number of the EFI handle database. Platform could override the value accordingly.
+  gEfiMdeModulePkgTokenSpaceGuid.PcdMaxHandleNumber|0x2000|UINT32|0x10000029
+
 [PcdsPatchableInModule]
   ## Specify memory size with page number for PEI code when
   #  Loading Module at Fixed Address feature is enabled.
-- 
2.45.2.windows.1

